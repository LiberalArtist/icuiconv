#lang zuo

;; https://www.gnu.org/software/libiconv/documentation/libiconv-1.13/iconv.1.html
;; "The `iconv −l` or `iconv −−list` command lists the names of the supported
;; encodings, in a system dependent format. For the libiconv implementation,
;; the names are printed in upper case, separated by whitespace, and alias
;; names of an encoding are listed on the same line as the encoding itself."




(define (parse-libiconv-list from)
  (display
   (render-libiconv-list
    (parse-libiconv-list-string (file->string from)))))

(define (parse-libiconv-list-string str)
  (define (no-cr str)
    (string-join (string-split str "\r") ""))
  (filter pair?
          (map (lambda (line)
                 (string-split line))
               (string-split (no-cr str) "\n"))))

(define fill-column 78)
(define left-offset (string-length "([("))
(define target-length (- fill-column left-offset))

(define (render-aliases encs)
  (~a "(" (let loop ([pos 0]
                     [encs (map ~s encs)])
            (define this (car encs))
            (define rest (cdr encs))
            (define new-pos
              (+ pos
                 (if (= 0 pos) 0 1)
                 (string-length this)
                 (if (pair? rest) 0 1)))
            (if (<= new-pos target-length)
                (~a (if (= 0 pos) "" " ")
                    this
                    (if (pair? rest)
                        (loop new-pos rest)
                        ")"))
                (~a "\n   " (loop 0 encs))))))

(define (render-libiconv-list lst)
  (string-join
   (map (lambda (encs pos)
          (~a (if (eq? 'first pos)
                  "("
                  " ")
              "["
              (render-aliases encs)
              "\n  #f]"
              (if (eq? 'last pos)
                  ")\n"
                  "")))
        lst
        (cons 'first (cdr (reverse (cons 'last (cdr lst))))))
   "\n"))

(let ([args (hash-ref (runtime-env) 'args)])
  (unless (= 1 (length args))
    (error "wrong number of arguments" args))
  (parse-libiconv-list (car args)))
